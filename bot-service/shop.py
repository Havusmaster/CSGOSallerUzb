import json
import logging
from aiogram import types, Bot, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
ORDER_STATUSES = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
}

async def handle_purchase_request(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–∑ WebApp"""
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get("action")
        user_id = message.from_user.id
        username = f"@{message.from_user.username}" if message.from_user.username else "–±–µ–∑ username"
        
        if action == "buy":
            item_id = data.get("item_id")
            item_type = data.get("item_type", "product")
            
            if item_type == "product":
                product = db.get_product(item_id)
                if not product:
                    return await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    
                if product["status"] != "available":
                    return await message.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                order_id = db.create_order(
                    user_id=user_id,
                    item_id=item_id,
                    item_type=item_type,
                    amount=product['price'],
                    status='pending'
                )
                
                if not order_id:
                    return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                        callback_data=f"my_orders_{user_id}"
                    )],
                    [InlineKeyboardButton(
                        text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                        callback_data="contact_support"
                    )]
                ])
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(
                    f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> ${product['price']:.2f}\n"
                    f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {ORDER_STATUSES['pending']}\n\n"
                    f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                admin_ids = bot.get("ADMIN_IDS", [])
                admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                            callback_data=f"process_order_{order_id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"cancel_order_{order_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
                            url=f"tg://user?id={user_id}"
                        )
                    ]
                ])
                
                for admin_id in admin_ids:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
                            f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
                            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n"
                            f"üí∞ <b>–¶–µ–Ω–∞:</b> ${product['price']:.2f}\n"
                            f"üìÖ <b>–î–∞—Ç–∞:</b> {db.get_order(order_id)['created_at']}",
                            reply_markup=admin_keyboard,
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify admin {admin_id}: {e}")
                
            elif item_type == "auction":
                auction = db.get_auction(item_id)
                if not auction:
                    return await message.answer("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    
                if auction["status"] != "active":
                    return await message.answer("‚ùå –≠—Ç–æ—Ç –∞—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
                # ...
                
                await message.answer(
                    f"üéØ <b>–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ!</b>\n\n"
                    f"üì¶ <b>–õ–æ—Ç:</b> {auction['name']}\n"
                    f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> ${auction['current_price']:.2f}\n"
                    f"‚è≥ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</b> {auction['end_time']}\n\n"
                    f"–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –µ—Å–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –ø–µ—Ä–µ–±—å—é—Ç.",
                    parse_mode='HTML'
                )
        
        elif action == "order_status":
            order_id = data.get("order_id")
            order = db.get_order(order_id)
            
            if not order:
                return await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
            if order['user_id'] != user_id and user_id not in bot.get("ADMIN_IDS", []):
                return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
                
            status_text = ORDER_STATUSES.get(order['status'], order['status'])
            
            await message.answer(
                f"üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_id}</b>\n\n"
                f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> ${order['amount']:.2f}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order['created_at']}",
                parse_mode='HTML'
            )
            
        elif action == "contact_admin":
            support_username = bot.get("SUPPORT_USERNAME", "@admin_username")
            await message.answer(
                f"üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: {support_username}\n"
                f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—Å 24/7!",
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error in handle_purchase_request: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
