from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

from database import db

admin_router = Router()
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "1939282952,5266027747").split(",")]

class ProductForm(StatesGroup):
    category = State()
    name = State()
    price = State()
    description = State()
    image_url = State()
    float_value = State()

async def show_admin_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton(text="üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_list_products")],
        [InlineKeyboardButton(text="üéØ –ê—É–∫—Ü–∏–æ–Ω—ã", callback_data="admin_auctions")],
    ])
    
    await message.answer(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data == "admin_add_product")
async def start_add_product(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî´ –û—Ä—É–∂–∏–µ", callback_data="category_weapons")],
        [InlineKeyboardButton(text="üë§ –ê–≥–µ–Ω—Ç—ã", callback_data="category_agents")],
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard
    )
    await state.set_state(ProductForm.category)

@admin_router.callback_query(F.data.startswith("category_"))
async def set_category(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"""
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.name)

@admin_router.message(ProductForm.name)
async def set_name(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):")
    await state.set_state(ProductForm.price)

@admin_router.message(ProductForm.price)
async def set_price(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ProductForm.description)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@admin_router.message(ProductForm.description)
async def set_description(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    await state.set_state(ProductForm.image_url)

@admin_router.message(ProductForm.image_url)
async def set_image_url(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await state.update_data(image_url=message.text)
    
    data = await state.get_data()
    if data.get("category") == "weapons":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ Float (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ):")
        await state.set_state(ProductForm.float_value)
    else:
        await finish_product_creation(message, state, None)

@admin_router.message(ProductForm.float_value)
async def set_float_value(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ Float"""
    try:
        float_value = float(message.text) if message.text != "0" else None
        await finish_product_creation(message, state, float_value)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Float. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def finish_product_creation(message: types.Message, state: FSMContext, float_value):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    
    product_id = db.add_product(
        category=data["category"],
        name=data["name"],
        price=data["price"],
        description=data["description"],
        image_url=data["image_url"],
        float_value=float_value
    )
    
    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"ID: {product_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"–¶–µ–Ω–∞: ${data['price']}"
    )
    await state.clear()

@admin_router.callback_query(F.data == "admin_list_products")
async def list_products(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    products = db.get_all_products()
    
    if not products:
        await callback.message.edit_text("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    for product in products:
        status_emoji = "‚úÖ" if product["status"] == "available" else "‚ùå"
        text += f"{status_emoji} {product['name']} - ${product['price']}\n"
        text += f"   ID: {product['id']}\n\n"
    
    await callback.message.edit_text(text)
