import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, Text
from aiogram.types import (
    WebAppInfo, InlineKeyboardMarkup, 
    InlineKeyboardButton, CallbackQuery
)
from aiogram.utils.markdown import hbold

from database import db
from shop import handle_purchase_request, ORDER_STATUSES
from admin_panel import admin_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "7504123410:AAEznGqRafbyrBx2e34HzsxztWV201HRMxE")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "5266027747").split(",")]
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://csgosalleruzb-1.onrender.com")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "@csgoseller_support")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
bot["ADMIN_IDS"] = ADMIN_IDS
bot["WEBAPP_URL"] = WEBAPP_URL
bot["SUPPORT_USERNAME"] = SUPPORT_USERNAME

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
dp.include_router(admin_router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
BOT_COMMANDS = [
    types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
    types.BotCommand(command="catalog", description="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
    types.BotCommand(command="orders", description="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
    types.BotCommand(command="support", description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
    types.BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
]

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω CS:GO —Å–∫–∏–Ω–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. "
        "–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º!"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )
        ],
        [
            InlineKeyboardButton(
                text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                callback_data="my_orders"
            ),
            InlineKeyboardButton(
                text="‚ùì –ü–æ–º–æ—â—å",
                callback_data="help"
            )
        ]
    ])
    
    if user.id in ADMIN_IDS:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_panel"
            )
        ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/orders - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    if message.from_user.id in ADMIN_IDS:
        help_text += "\n\nüëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        help_text += "/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    
    await message.answer(help_text)

@dp.message(Command("catalog"))
async def cmd_catalog(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        "üéÆ <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ CS:GO</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã:",
        reply_markup=keyboard
    )

@dp.callback_query(Text(startswith=["order_", "my_orders"]))
async def handle_order_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    try:
        data = callback.data
        user_id = callback.from_user.id
        
        if data == "my_orders" or data.startswith("my_orders_"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            orders = db.get_user_orders(user_id)
            
            if not orders:
                await callback.message.answer(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. "
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!"
                )
                return
            
            orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            
            for order in orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                status = ORDER_STATUSES.get(order['status'], order['status'])
                orders_text += (
                    f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üí∞ –°—É–º–º–∞: ${order['amount']:.2f}\n"
                    f"üìÖ {order['created_at']}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                )
            
            if len(orders) > 10:
                orders_text += "\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üõç –í –∫–∞—Ç–∞–ª–æ–≥",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    ),
                    InlineKeyboardButton(
                        text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                        callback_data="contact_support"
                    )
                ]
            ])
            
            await callback.message.edit_text(orders_text, reply_markup=keyboard)
        
        elif data.startswith("order_details_"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            order_id = int(data.split("_")[2])
            order = db.get_order(order_id)
            
            if not order or order['user_id'] != user_id:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
                return
            
            status = ORDER_STATUSES.get(order['status'], order['status'])
            
            text = (
                f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n\n"
                f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> ${order['amount']:.2f}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {order['created_at']}\n"
            )
            
            if order.get('updated_at'):
                text += f"üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {order['updated_at']}\n"
            
            if order.get('admin_comment'):
                text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order['admin_comment']}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                        callback_data="my_orders"
                    ),
                    InlineKeyboardButton(
                        text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                        callback_data="contact_support"
                    )
                ]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in handle_order_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(Text("contact_support"))
async def contact_support(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                url=f"https://t.me/{SUPPORT_USERNAME[1:] if SUPPORT_USERNAME.startswith('@') else SUPPORT_USERNAME}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="back_to_main"
            )
        ]
    ])
    
    await callback.message.edit_text(
        f"üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: {SUPPORT_USERNAME}\n\n"
        "‚è∞ <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n"
        "üí¨ <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –¥–æ 15 –º–∏–Ω—É—Ç",
        reply_markup=keyboard
    )

@dp.callback_query(Text("back_to_main"))
async def back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_start(callback.message)
    await callback.answer()

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    from admin_panel import show_admin_menu
    await show_admin_menu(message)

@dp.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
    try:
        await handle_purchase_request(message, bot)
    except Exception as e:
        logger.error(f"Error handling webapp data: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

async def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    await bot.set_my_commands(BOT_COMMANDS)

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    logger.info(f"WebApp URL: {WEBAPP_URL}")
    logger.info(f"Admin IDs: {ADMIN_IDS}")
    await setup_bot_commands()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await on_startup()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
    except Exception as e:
        logger.critical(f"Fatal error: {e}", exc_info=True)
