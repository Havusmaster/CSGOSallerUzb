# bot.py
"""
–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ (aiogram 3.x) + Flask —Å–∞–π—Ç (webapp) –≤ —Ñ–æ–Ω–µ.
–í—Å–µ —Ç–µ–∫—Å—Ç—ã ‚Äî –∏–∑ translations.yaml (—á–µ—Ä–µ–∑ config.t(lang,key)).
–Ø–∑—ã–∫ –∏ —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ SQLite (database.set_user_pref).
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —É–∑–±–µ–∫—Å–∫–∏–π + —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt
2) –í –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (Render/Replit) –∑–∞–¥–∞–π—Ç–µ BOT_TOKEN –∏ ADMIN_IDS (–ø–æ –∂–µ–ª–∞–Ω–∏—é).
3) –ó–∞–ø—É—Å–∫: python bot.py
"""

import asyncio
import logging
import threading
import time

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN, t, DEFAULT_LANG, DEFAULT_THEME, APP_URL, ADMIN_IDS
import database
from webapp import app as flask_app

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
    raise SystemExit("BOT_TOKEN not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN)
dp = Dispatcher()

# ----------------------------
#  –ü–æ–º–æ—â–Ω–∏–∫–∏
# ----------------------------
def get_user_lang(tg_id: int):
    prefs = database.get_user_pref(tg_id)
    return prefs.get("lang", DEFAULT_LANG)

def get_user_theme(tg_id: int):
    prefs = database.get_user_pref(tg_id)
    return prefs.get("theme", DEFAULT_THEME)

def make_lang_kb(current_lang):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=f"setlang:ru"),
        InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data=f"setlang:uz")
    )
    return kb

def make_theme_kb(current_theme):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(text="üåô –¢—ë–º–Ω–∞—è", callback_data="settheme:dark"),
        InlineKeyboardButton(text="‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è", callback_data="settheme:light")
    )
    return kb

# ----------------------------
#  –ö–æ–º–∞–Ω–¥—ã
# ----------------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    tg_id = message.from_user.id
    database.set_user_pref(tg_id)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–µ—Ñ–æ–ª—Ç—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    lang = get_user_lang(tg_id)
    text = t(lang, "bot.start")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫", callback_data="choose_lang")],
        [InlineKeyboardButton(text="üé® –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data="choose_theme")],
        [InlineKeyboardButton(text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", url=APP_URL + f"?tg_id={tg_id}")]
    ])
    await message.answer(text, reply_markup=kb)

@dp.message(Command(commands=["help"]))
async def cmd_help(message: types.Message):
    lang = get_user_lang(message.from_user.id)
    await message.answer(t(lang, "bot.help"))

@dp.message(Command(commands=["shop"]))
async def cmd_shop(message: types.Message):
    lang = get_user_lang(message.from_user.id)
    prods = database.get_products(only_available=True)
    if not prods:
        await message.answer(t(lang, "bot.shop_empty"))
        return
    for p in prods:
        text = f"üì¶ <b>{p['name']}</b>\n{p['description']}\nüí∞ {p['price']}\n"
        if p['type'] == "weapon" and p.get('float_value'):
            text += f"üî¢ Float: {p['float_value']}\n"
        kb = InlineKeyboardMarkup(row_width=2)
        if p.get('link'):
            kb.add(InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç", url=p['link']))
        if ADMIN_IDS:
            kb.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"tg://user?id={ADMIN_IDS[0]}"))
        kb.add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy:{p['id']}"))
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

# ----------------------------
#  Callback handlers (language/theme/buy)
# ----------------------------
@dp.callback_query(lambda c: c.data == "choose_lang")
async def choose_lang_callback(cq: types.CallbackQuery):
    tg_id = cq.from_user.id
    lang = get_user_lang(tg_id)
    await cq.message.answer(t(lang, "bot.choose_lang"), reply_markup=make_lang_kb(lang))
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("setlang:"))
async def setlang_callback(cq: types.CallbackQuery):
    tg_id = cq.from_user.id
    _, new_lang = cq.data.split(":", 1)
    database.set_user_pref(tg_id, lang=new_lang)
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
    confirm_key = "bot.lang_uz_selected" if new_lang == "uz" else "bot.lang_ru_selected"
    await cq.message.answer(t(new_lang, "bot.lang_uz_selected") if new_lang == "uz" else t(new_lang, "bot.lang_ru_selected"))
    await cq.answer()

@dp.callback_query(lambda c: c.data == "choose_theme")
async def choose_theme_callback(cq: types.CallbackQuery):
    tg_id = cq.from_user.id
    lang = get_user_lang(tg_id)
    await cq.message.answer(t(lang, "bot.choose_theme"), reply_markup=make_theme_kb(get_user_theme(tg_id)))
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("settheme:"))
async def settheme_callback(cq: types.CallbackQuery):
    tg_id = cq.from_user.id
    _, theme = cq.data.split(":", 1)
    database.set_user_pref(tg_id, theme=theme)
    lang = get_user_lang(tg_id)
    if theme == "dark":
        await cq.message.answer(t(lang, "bot.theme_dark_selected"))
    else:
        await cq.message.answer(t(lang, "bot.theme_light_selected"))
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("buy:"))
async def buy_callback(cq: types.CallbackQuery):
    pid = int(cq.data.split(":", 1)[1])
    p = database.get_product(pid)
    if not p:
        await cq.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await cq.answer()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if not hasattr(dp, "waiting_for_purchase"):
        dp.waiting_for_purchase = {}
    dp.waiting_for_purchase[cq.from_user.id] = pid
    lang = get_user_lang(cq.from_user.id)
    await cq.message.answer(t(lang, "bot.purchase_request"))
    await cq.answer()

# ----------------------------
#  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ç.—á. —Å—Å—ã–ª–∫–∞ –ø–æ—Å–ª–µ "–ö—É–ø–∏—Ç—å")
# ----------------------------
@dp.message()
async def handle_text(message: types.Message):
    uid = message.from_user.id
    lang = get_user_lang(uid)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
    if hasattr(dp, "waiting_for_purchase") and uid in dp.waiting_for_purchase:
        pid = dp.waiting_for_purchase.pop(uid, None)
        p = database.get_product(pid)
        if not p:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        link = message.text.strip()
        buyer = f"@{message.from_user.username}" if message.from_user.username else f"ID:{uid}"
        text = f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\nüì¶ –¢–æ–≤–∞—Ä: {p['name']}\nüí∞ –¶–µ–Ω–∞: {p['price']}\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer}\nüîó –°—Å—ã–ª–∫–∞: {link}"
        for aid in ADMIN_IDS:
            try:
                await bot.send_message(int(aid), text)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º: %s", e)
        await message.answer(t(lang, "bot.purchase_sent"))
        return

    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await message.answer(t(lang, "bot.help"))

# ----------------------------
#  –ê—É–∫—Ü–∏–æ–Ω: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ----------------------------
async def check_auctions_loop():
    while True:
        try:
            now = int(time.time())
            with database.get_conn() as conn:
                cur = conn.cursor()
                cur.execute("SELECT * FROM auctions WHERE finished=0 AND end_timestamp<=?", (now,))
                rows = cur.fetchall()
                for row in rows:
                    auction = dict(row)
                    aid = auction['id']
                    cur.execute("SELECT * FROM bids WHERE auction_id=? ORDER BY amount DESC, created_at ASC LIMIT 1", (aid,))
                    best = cur.fetchone()
                    if best:
                        best = dict(best)
                        winner = best['bidder_identifier']
                        amount = best['amount']
                        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        summary = f"üèÅ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\nüè∑ –õ–æ—Ç: {auction['title']}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}\n–°—Ç–∞–≤–∫–∞: {amount}"
                        for admin in ADMIN_IDS:
                            try:
                                await bot.send_message(int(admin), summary)
                            except Exception as e:
                                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: %s", e)
                    else:
                        for admin in ADMIN_IDS:
                            try:
                                await bot.send_message(int(admin), f"‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω {auction['title']} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.")
                            except Exception as e:
                                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: %s", e)
                    cur.execute("UPDATE auctions SET finished=1 WHERE id=?", (aid,))
                conn.commit()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: %s", e)
        await asyncio.sleep(30)

# ----------------------------
#  –ó–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–µ + polling (—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º webhook)
# ----------------------------
def run_flask_background():
    logger.info("–ó–∞–ø—É—Å–∫ Flask WebApp –≤ —Ñ–æ–Ω–µ...")
    flask_app.run(host="0.0.0.0", port=5000, threaded=True)

async def main():
    # –ó–∞–ø—É—Å—Ç–∏–º Flask –≤ —Ñ–æ–Ω–µ
    flask_thread = threading.Thread(target=run_flask_background, daemon=True)
    flask_thread.start()

    # –£–¥–∞–ª—è–µ–º webhook (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞) ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –£–¥–∞–ª—ë–Ω webhook (–µ—Å–ª–∏ –±—ã–ª). –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º polling.")
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: %s", e)

    # –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    asyncio.create_task(check_auctions_loop())

    # –ó–∞–ø—É—Å–∫ polling
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
